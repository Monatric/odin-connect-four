Components of ConnectFour:
  - Two Players
    - Player 1
      - Token: ♠
    - Player 2
      - Token: ♣

  - Grid (board)
    - six row
    - seven column
    - Methods needed:
      - initializes the board as a hash with coordinates as keys like (1, 1), (1, 2)... (7, 6)
      - updates the board
      - shows the board
      - game over
      - full
      - column full
      - valid move
      - constant array of algorithm for directions
  
  - Game
    - Methods needed:
      - initializes current turn, player 1 & 2, board
      - sets up Players
      - switches turn
      - conclusion
        - prints the winner or tie

    - To check for winner, everytime a player inserts a token, the scanner starts from where
      the token lands. From there, the token checks for all directions if there is an identical
      token, and checks until it counts 4. Otherwise, it checks another. 

      Once the scanner finds a direction/s, it will only start scanning from that direction until
      it counts 4. If not, switch to the other direction. If all directions doesn't lead to 4,
      continue the game.

      For example:
        [
          [O O O O],
          [O y x y],
          [O x x x],
          [x y y y]
        ]
        into
        [
          [O O O x],
          [O y x y],
          [O x x x],
          [x y y y]
        ]
        Last inserted token position: [4, 4]
        How would it check is:
          Is there an 'x' in
            [4, 3]
            [5, 3]
            [5, 4]
            [5, 5] (maybe useless bc token only goes down)
            [4, 5]
            [3, 5]
            [3, 4]
            all no except
            [3, 3] (-1, -1)
              [2, 2] 
                [1, 1] Total count: 4
          
          Direction pattern:
            0, -1
            1, -1
            1, 0
            1, 1 (maybe useless bc token only goes down)
            0, 1
            -1, 1
            -1, 0
            -1, -1
            make horizontal key =>
            make diagonal backward key
            make diagonal forward key
            make vertical key
            next_coord = [row + key[0], col + key[0]

            make helper methods
              #count_vertically(row, col, token)
                count = 1
                next_coord = [row + DIRECTION[:vert][0], col + DIRECTION[:vert][1]]
                while cells[next_coord] == token
                  count += 1
                  next_coord = [row + DIRECTION[:vert][0], col + DIRECTION[:vert][1]]
                return 4 if count == 4 



            Loop through this array
            Subtract/add these numbers to the row col
            Start count from 1
            If it matches a token, use the same array that was added/subbed to row col
            count += 1
            Return true if count == 4
            If the token changes, reset counting to 1 because it is not connect four
            Continue to the next array. Looping through everything without count == 4 means not game over (FALSE)

    
  - Main
    - starts the game
    - asks for repeating game
    - asks for column selection 
    -


Save for later:
context 'when the player selects a full column' do
      let(:cells_column_full) do
        {
          [1, 1] => 'X',
          [2, 1] => 'X',
          [3, 1] => 'O',
          [4, 1] => 'X',
          [5, 1] => 'O',
          [6, 1] => 'O'
        }
      end
      subject(:board) { described_class.new(cells_column_full) }

      it 'displays a message that it cannot fill that column' do
        error_msg = ''
      end
    end